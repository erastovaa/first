import numpy as np
import copy 

#tried to work with more generations, incorrect result


class LifeGame(object):
    def __init__(self, m):
        self.X = len(m)
        self.Y = len(m[0])
#         self.ocean = np.matrix(np.random.randint(0,4, size=(X , Y)))
        matrix1 = np.matrix(m)
        matrix2 = np.zeros((len(m) + 2, len(m[0]) + 2))
        for i in range(1, len(matrix2) - 1):
            for j in range(1, len(matrix2[0]) - 1):
                matrix2[i, j] = matrix1[i - 1, j - 1]
        self.ocean = matrix2
        print(matrix2)
#         self.ocean = np.matrix(m)


    def _get_neighbors(self, i, j):
        ox = [0, 0, -1, -1, -1, 1, 1, 1]
        oy = [-1, 1, -1, 0, 1, -1, 0, 1]
        empty = 0
        rock = 0
        fish = 0
        shrimp = 0
        for k in range(8):
            n_x = (i + ox[k]) 
            n_y = (j + oy[k]) 
            print(n_x, n_y)

            if self.ocean[n_x, n_y] == 0:
                empty += 1
                print('empty', empty)
            if self.ocean[n_x, n_y] == 1:
                rock += 1
            if self.ocean[n_x, n_y] == 2:
                fish += 1
                print('fish', fish)
            if self.ocean[n_x, n_y] == 3:
                shrimp += 1
        neighbors = {'empty': empty, 'rock': rock, 'fish': fish, 'shrimp': shrimp}
        return neighbors
    
    def get_next_generation(self, number):
        prev_gen = copy.copy(self.ocean)
        n = 0
        while n < number:
            
            print(prev_gen)
            for i in range(len(self.ocean) - 1):
                next_gen = copy.copy(prev_gen)

                for j in range(len(prev_gen[0]) - 1):
                    if prev_gen[i, j] == 0:
                        if self.get_neighbors(i, j)['fish'] == 3:
                            next_gen[i, j] = 2
                            print('empty cell fish born', next_gen)
                        if self.get_neighbors(i, j)['shrimp'] == 3:
                            next_gen[i, j] = 3

                    if prev_gen[i, j] == 2:
                        if self.get_neighbors(i, j)['fish'] > 3:
                            next_gen[i, j] = 0
                            print('too many, fish dies', next_gen)
                        if self.get_neighbors(i, j)['fish'] < 2:
                            next_gen[i, j] = 0
                            print('too few, fish dies', next_gen)

                    if prev_gen[i, j] == 3:
                        if self.get_neighbors(i, j)['shrimp'] > 3:
                            next_gen[i, j] = 0
                        if self.get_neighbors(i, j)['shrimp'] < 2:
                            next_gen[i, j] = 0
            prev_gen = next_gen
            n += 1
            print("start next loop")
            
#         return next_gen
        return prev_gen[1:len(prev_gen) - 1, 1:len(prev_gen[0]) - 1]

                
           
