import numpy as np
import copy 
# works for one generation only

class LifeGame(object):
    def __init__(self, m):
        self.X = len(m)
        self.Y = len(m[0])
        matrix1 = np.matrix(m)
        matrix2 = np.zeros((len(m) + 2, len(m[0]) + 2))
        for i in range(1, len(matrix2) - 1):
            for j in range(1, len(matrix2[0]) - 1):
                matrix2[i, j] = matrix1[i - 1, j - 1]
        self.ocean = matrix2


    def _get_neighbors(self, i, j):
        ox = [0, 0, -1, -1, -1, 1, 1, 1]
        oy = [-1, 1, -1, 0, 1, -1, 0, 1]
        empty = 0
        rock = 0
        fish = 0
        shrimp = 0
        for k in range(8):
            n_x = (i + ox[k]) 
            n_y = (j + oy[k]) 
 
            if self.ocean[n_x, n_y] == 0:
                empty += 1
            if self.ocean[n_x, n_y] == 1:
                rock += 1
            if self.ocean[n_x, n_y] == 2:
                fish += 1
            if self.ocean[n_x, n_y] == 3:
                shrimp += 1
        neighbors = {'empty': empty, 'rock': rock, 'fish': fish, 'shrimp': shrimp}
        return neighbors
    
    def get_next_generation(self, number):
        
        next_gen = copy.copy(self.ocean)
        for i in range(len(self.ocean) - 1):
            
            for j in range(len(self.ocean[0]) - 1):
                if self.ocean[i, j] == 0:
                    if self.get_neighbors(i, j)['fish'] == 3:
                        next_gen[i, j] = 2
                    if self.get_neighbors(i, j)['shrimp'] == 3:
                        next_gen[i, j] = 3

                if self.ocean[i, j] == 2:
                    if self.get_neighbors(i, j)['fish'] > 3:
                        next_gen[i, j] = 0
                    if self.get_neighbors(i, j)['fish'] < 2:
                        next_gen[i, j] = 0
                    
                if self.ocean[i, j] == 3:
                    if self.get_neighbors(i, j)['shrimp'] > 3:
                        next_gen[i, j] = 0
                    if self.get_neighbors(i, j)['shrimp'] < 2:
        return next_gen[1:len(next_gen) - 1, 1:len(next_gen[0]) - 1]

                
           

